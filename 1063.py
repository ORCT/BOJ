'''
가로는 그대로 세로는 반대(원래는 맞는디 이중 리스트 관점에서는 반대)
명령을 한 번에 조합해서 다 연산하면 좋긴 한데
중간에 돌이나 킹이 보드 밖으로 나가지 않는지를 체크해줘야함
숫자는 1~8까지이고 문자는 A~H까지임 미리 문자를 숫자로 치환하고 계산해도 되고
R = [0][1]
L = [0][-1]
B = [-1][0]
T = [1][0]
RT = [1][1]
LT = [1][-1]
RB = [-1][1]
LB = [-1][-1]

1. 지금 명령으로 k가 보드 밖으로 나가진 않는지?
1-1. 나가지 않는 다면 이동 가능(하지만 아직 이동하지 말것)
2. k가 이동하게 될 자리가 s가 있는 자리와 같은지?
2-1 같다면 s부터 지금 명령에 따를 것
2-2 따르기 전에 s를 명령대로 움직였을 때 보드 밖으로 나가진 않는지?

즉 1번으로 고려해야 하는 것은 지금 명령에 따랐을 때 k가 s의 자리로 가는지 아닌지다
아닐 경우는 지금 명령으로 k가 보드 밖으로 나가는지 아닌지만 체크하면 됨
갈 경우 s로 넘어와서 s가 지금 명령으로 보드 밖으로 나가는지 아닌지를 체크한다
아니라면 s 움직이고 k 움직이면 됨
'''
def f(k, s, o):
    if k[0]+ob[o][0] == s[0] and k[1]+ob[o][1] == s[1]:
        if 0 <= s[0]+ob[o][0] <= 7 and 1 <= s[1]+ob[o][1] <= 8:
            s[0] += ob[o][0]
            k[0] += ob[o][0]
            s[1] += ob[o][1]
            k[1] += ob[o][1]
        else:
            return
    else:
        if 0 <= k[0]+ob[o][0] <= 7 and 1 <= k[1]+ob[o][1] <= 8:
            k[0] += ob[o][0]
            k[1] += ob[o][1]
        else:
            return

x = 'ABCDEFGH'
ob = {'R': (1, 0),
      'L': (-1, 0),
      'B': (0, -1),
      'T': (0, 1),
      'RT': (1, 1),
      'LT': (-1, 1),
      'RB': (1, -1),
      'LB': (-1, -1)}
k, s, n = input().split()
k, s = list(k), list(s)
k[0], k[1], s[0], s[1] = x.index(k[0]), int(k[1]), x.index(s[0]), int(s[1])
for _ in range(int(n)):
    o = input()
    f(k, s, o)
print(f'{x[k[0]]}{k[1]}')
print(f'{x[s[0]]}{s[1]}')